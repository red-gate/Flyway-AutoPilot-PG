-- Script generated by Redgate Compare v1.24.1.24210
SET check_function_bodies = false;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.updateorderstatus(integer, character varying)...';END$$;
CREATE FUNCTION sales.updateorderstatus(IN orderid integer, IN newstatus character varying)
RETURNS void
LANGUAGE plpgsql
AS $_$
BEGIN
    UPDATE Sales.Orders
    SET Status = NewStatus
    WHERE OrderID = OrderID;
END;
$_$;
ALTER FUNCTION sales.updateorderstatus(IN orderid integer, IN newstatus character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.getcustomerflighthistory(integer)...';END$$;
CREATE FUNCTION sales.getcustomerflighthistory(IN customerid integer)
RETURNS TABLE(orderid integer, airline character varying, departurecity character varying, arrivalcity character varying, orderdate timestamp with time zone, status character varying, totalamount numeric)
LANGUAGE plpgsql
AS $_$
BEGIN
    RETURN QUERY
    SELECT 
        o.OrderID,
        f.Airline,
        f.DepartureCity,
        f.ArrivalCity,
        o.OrderDate,
        o.Status,
        o.TotalAmount
    FROM Sales.Orders o
    JOIN Inventory.Flight f ON o.FlightID = f.FlightID
    WHERE o.CustomerID = CustomerID
    ORDER BY o.OrderDate;
END;
$_$;
ALTER FUNCTION sales.getcustomerflighthistory(IN customerid integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.applydiscount(integer, character varying)...';END$$;
CREATE FUNCTION sales.applydiscount(IN orderid integer, IN discountcode character varying)
RETURNS void
LANGUAGE plpgsql
AS $_$
DECLARE
    DiscountID INT;
    DiscountPercentage DECIMAL(4, 2);
    ExpiryDate TIMESTAMPTZ;
BEGIN
    SELECT DiscountID, DiscountPercentage, ExpiryDate
    INTO DiscountID, DiscountPercentage, ExpiryDate
    FROM Sales.DiscountCode
    WHERE Code = DiscountCode;

    IF DiscountID IS NOT NULL AND ExpiryDate >= CURRENT_TIMESTAMP THEN
        UPDATE Sales.Orders
        SET TotalAmount = TotalAmount * (1 - DiscountPercentage / 100)
        WHERE OrderID = OrderID;

        INSERT INTO Sales.OrderAuditLog (OrderID, ChangeDescription)
        VALUES (OrderID, CONCAT('Discount ', DiscountCode, ' applied with ', DiscountPercentage, '% off.'));
    ELSE
        RAISE EXCEPTION 'Invalid or expired discount code.';
    END IF;
END;
$_$;
ALTER FUNCTION sales.applydiscount(IN orderid integer, IN discountcode character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.updateavailableseats(integer, integer)...';END$$;
CREATE FUNCTION inventory.updateavailableseats(IN flightid integer, IN seatchange integer)
RETURNS void
LANGUAGE plpgsql
AS $_$
BEGIN
    UPDATE Inventory.Flight
    SET AvailableSeats = AvailableSeats + SeatChange
    WHERE FlightID = FlightID;
END;
$_$;
ALTER FUNCTION inventory.updateavailableseats(IN flightid integer, IN seatchange integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.addmaintenancelog(integer, character varying)...';END$$;
CREATE FUNCTION inventory.addmaintenancelog(IN flightid integer, IN description character varying)
RETURNS void
LANGUAGE plpgsql
AS $_$
BEGIN
    INSERT INTO Inventory.MaintenanceLog (FlightID, Description, MaintenanceStatus)
    VALUES (FlightID, Description, 'Pending');
    RAISE NOTICE 'Maintenance log entry created.';
END;
$_$;
ALTER FUNCTION inventory.addmaintenancelog(IN flightid integer, IN description character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.recordfeedback(integer, integer, character varying)...';END$$;
CREATE FUNCTION customers.recordfeedback(IN customerid integer, IN rating integer, IN comments character varying)
RETURNS void
LANGUAGE plpgsql
AS $_$
BEGIN
    INSERT INTO Customers.CustomerFeedback (CustomerID, Rating, Comments)
    VALUES (CustomerID, Rating, Comments);
    RAISE NOTICE 'Customer feedback recorded successfully.';
END;
$_$;
ALTER FUNCTION customers.recordfeedback(IN customerid integer, IN rating integer, IN comments character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders_orderid_seq...';END$$;
CREATE SEQUENCE sales.orders_orderid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE sales.orders_orderid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders...';END$$;
CREATE TABLE sales.orders (
    orderid integer NOT NULL DEFAULT nextval('sales.orders_orderid_seq'::regclass),
    customerid integer,
    flightid integer,
    orderdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) DEFAULT 'Pending'::character varying,
    totalamount numeric(10,2),
    ticketquantity integer
);
ALTER TABLE sales.orders ADD CONSTRAINT orders_pkey PRIMARY KEY (orderid);
ALTER TABLE sales.orders OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering sales.orders_orderid_seq...';END$$;
ALTER SEQUENCE sales.orders_orderid_seq OWNED BY sales.orders.orderid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orderauditlog_auditid_seq...';END$$;
CREATE SEQUENCE sales.orderauditlog_auditid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE sales.orderauditlog_auditid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orderauditlog...';END$$;
CREATE TABLE sales.orderauditlog (
    auditid integer NOT NULL DEFAULT nextval('sales.orderauditlog_auditid_seq'::regclass),
    orderid integer,
    changedate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    changedescription character varying(500)
);
ALTER TABLE sales.orderauditlog ADD CONSTRAINT orderauditlog_pkey PRIMARY KEY (auditid);
ALTER TABLE sales.orderauditlog OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering sales.orderauditlog_auditid_seq...';END$$;
ALTER SEQUENCE sales.orderauditlog_auditid_seq OWNED BY sales.orderauditlog.auditid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orderauditlog.orderauditlog_orderid_fkey...';END$$;
ALTER TABLE sales.orderauditlog ADD CONSTRAINT orderauditlog_orderid_fkey FOREIGN KEY (orderid) REFERENCES sales.orders (orderid);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.discountcode_discountid_seq...';END$$;
CREATE SEQUENCE sales.discountcode_discountid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE sales.discountcode_discountid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.discountcode...';END$$;
CREATE TABLE sales.discountcode (
    discountid integer NOT NULL DEFAULT nextval('sales.discountcode_discountid_seq'::regclass),
    code character varying(20) NOT NULL,
    discountpercentage numeric(4,2),
    expirydate timestamp with time zone
);
ALTER TABLE sales.discountcode ADD CONSTRAINT discountcode_pkey PRIMARY KEY (discountid);
ALTER TABLE sales.discountcode OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering sales.discountcode_discountid_seq...';END$$;
ALTER SEQUENCE sales.discountcode_discountid_seq OWNED BY sales.discountcode.discountid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.maintenancelog_logid_seq...';END$$;
CREATE SEQUENCE inventory.maintenancelog_logid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE inventory.maintenancelog_logid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.maintenancelog...';END$$;
CREATE TABLE inventory.maintenancelog (
    logid integer NOT NULL DEFAULT nextval('inventory.maintenancelog_logid_seq'::regclass),
    flightid integer,
    maintenancedate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    description character varying(500),
    maintenancestatus character varying(20) DEFAULT 'Pending'::character varying
);
ALTER TABLE inventory.maintenancelog ADD CONSTRAINT maintenancelog_pkey PRIMARY KEY (logid);
ALTER TABLE inventory.maintenancelog OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering inventory.maintenancelog_logid_seq...';END$$;
ALTER SEQUENCE inventory.maintenancelog_logid_seq OWNED BY inventory.maintenancelog.logid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flightroute_routeid_seq...';END$$;
CREATE SEQUENCE inventory.flightroute_routeid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE inventory.flightroute_routeid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flightroute...';END$$;
CREATE TABLE inventory.flightroute (
    routeid integer NOT NULL DEFAULT nextval('inventory.flightroute_routeid_seq'::regclass),
    departurecity character varying(50) NOT NULL,
    arrivalcity character varying(50) NOT NULL,
    distance integer NOT NULL
);
ALTER TABLE inventory.flightroute ADD CONSTRAINT flightroute_pkey PRIMARY KEY (routeid);
ALTER TABLE inventory.flightroute OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering inventory.flightroute_routeid_seq...';END$$;
ALTER SEQUENCE inventory.flightroute_routeid_seq OWNED BY inventory.flightroute.routeid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flight_flightid_seq...';END$$;
CREATE SEQUENCE inventory.flight_flightid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE inventory.flight_flightid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flight...';END$$;
CREATE TABLE inventory.flight (
    flightid integer NOT NULL DEFAULT nextval('inventory.flight_flightid_seq'::regclass),
    airline character varying(50) NOT NULL,
    departurecity character varying(50) NOT NULL,
    arrivalcity character varying(50) NOT NULL,
    departuretime timestamp with time zone NOT NULL,
    arrivaltime timestamp with time zone NOT NULL,
    price numeric(10,2) NOT NULL,
    availableseats integer NOT NULL
);
ALTER TABLE inventory.flight ADD CONSTRAINT flight_pkey PRIMARY KEY (flightid);
ALTER TABLE inventory.flight OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering inventory.flight_flightid_seq...';END$$;
ALTER SEQUENCE inventory.flight_flightid_seq OWNED BY inventory.flight.flightid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flightmaintenancestatus...';END$$;
CREATE VIEW inventory.flightmaintenancestatus (flightid, airline, departurecity, arrivalcity, maintenancecount, completedmaintenance) AS SELECT f.flightid,
    f.airline,
    f.departurecity,
    f.arrivalcity,
    count(m.logid) AS maintenancecount,
    sum(
        CASE
            WHEN ((m.maintenancestatus)::text = 'Completed'::text) THEN 1
            ELSE 0
        END) AS completedmaintenance
   FROM (inventory.flight f
     LEFT JOIN inventory.maintenancelog m ON ((f.flightid = m.flightid)))
  GROUP BY f.flightid, f.airline, f.departurecity, f.arrivalcity;
ALTER VIEW inventory.flightmaintenancestatus OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders.orders_flightid_fkey...';END$$;
ALTER TABLE sales.orders ADD CONSTRAINT orders_flightid_fkey FOREIGN KEY (flightid) REFERENCES inventory.flight (flightid);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.maintenancelog.maintenancelog_flightid_fkey...';END$$;
ALTER TABLE inventory.maintenancelog ADD CONSTRAINT maintenancelog_flightid_fkey FOREIGN KEY (flightid) REFERENCES inventory.flight (flightid);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.loyaltyprogram_programid_seq...';END$$;
CREATE SEQUENCE customers.loyaltyprogram_programid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE customers.loyaltyprogram_programid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.loyaltyprogram...';END$$;
CREATE TABLE customers.loyaltyprogram (
    programid integer NOT NULL DEFAULT nextval('customers.loyaltyprogram_programid_seq'::regclass),
    programname character varying(50) NOT NULL,
    pointsmultiplier numeric(3,2) DEFAULT 1.0
);
ALTER TABLE customers.loyaltyprogram ADD CONSTRAINT loyaltyprogram_pkey PRIMARY KEY (programid);
ALTER TABLE customers.loyaltyprogram OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering customers.loyaltyprogram_programid_seq...';END$$;
ALTER SEQUENCE customers.loyaltyprogram_programid_seq OWNED BY customers.loyaltyprogram.programid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customerfeedback_feedbackid_seq...';END$$;
CREATE SEQUENCE customers.customerfeedback_feedbackid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE customers.customerfeedback_feedbackid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customerfeedback...';END$$;
CREATE TABLE customers.customerfeedback (
    feedbackid integer NOT NULL DEFAULT nextval('customers.customerfeedback_feedbackid_seq'::regclass),
    customerid integer,
    feedbackdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    rating integer,
    comments character varying(500)
);
ALTER TABLE customers.customerfeedback ADD CONSTRAINT customerfeedback_pkey PRIMARY KEY (feedbackid);
ALTER TABLE customers.customerfeedback OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering customers.customerfeedback_feedbackid_seq...';END$$;
ALTER SEQUENCE customers.customerfeedback_feedbackid_seq OWNED BY customers.customerfeedback.feedbackid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_customerid_seq...';END$$;
CREATE SEQUENCE customers.customer_customerid_seq
AS integer
INCREMENT BY 1
MINVALUE 1
MAXVALUE 2147483647
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE customers.customer_customerid_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer...';END$$;
CREATE TABLE customers.customer (
    customerid integer NOT NULL DEFAULT nextval('customers.customer_customerid_seq'::regclass),
    firstname character varying(50) NOT NULL,
    lastname character varying(50) NOT NULL,
    email character varying(100) NOT NULL,
    dateofbirth date,
    phone character varying(20),
    address character varying(200)
);
ALTER TABLE customers.customer ADD CONSTRAINT customer_pkey PRIMARY KEY (customerid);
ALTER TABLE customers.customer OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Altering customers.customer_customerid_seq...';END$$;
ALTER SEQUENCE customers.customer_customerid_seq OWNED BY customers.customer.customerid;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.customerordersview...';END$$;
CREATE VIEW sales.customerordersview (customerid, firstname, lastname, orderid, orderdate, status, totalamount) AS SELECT c.customerid,
    c.firstname,
    c.lastname,
    o.orderid,
    o.orderdate,
    o.status,
    o.totalamount
   FROM (customers.customer c
     JOIN sales.orders o ON ((c.customerid = o.customerid)));
ALTER VIEW sales.customerordersview OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customerfeedbacksummary...';END$$;
CREATE VIEW customers.customerfeedbacksummary (customerid, firstname, lastname, averagerating, feedbackcount) AS SELECT c.customerid,
    c.firstname,
    c.lastname,
    avg(f.rating) AS averagerating,
    count(f.feedbackid) AS feedbackcount
   FROM (customers.customer c
     LEFT JOIN customers.customerfeedback f ON ((c.customerid = f.customerid)))
  GROUP BY c.customerid, c.firstname, c.lastname;
ALTER VIEW customers.customerfeedbacksummary OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders.orders_customerid_fkey...';END$$;
ALTER TABLE sales.orders ADD CONSTRAINT orders_customerid_fkey FOREIGN KEY (customerid) REFERENCES customers.customer (customerid);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customerfeedback.customerfeedback_customerid_fkey...';END$$;
ALTER TABLE customers.customerfeedback ADD CONSTRAINT customerfeedback_customerid_fkey FOREIGN KEY (customerid) REFERENCES customers.customer (customerid);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.discountcode_code_key...';END$$;
ALTER TABLE sales.discountcode ADD CONSTRAINT discountcode_code_key UNIQUE (code);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_email_key...';END$$;
ALTER TABLE customers.customer ADD CONSTRAINT customer_email_key UNIQUE (email);

SET check_function_bodies = true;
