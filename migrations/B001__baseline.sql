-- Script generated by Redgate Compare v1.25.1.24968
SET check_function_bodies = false;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders...';END$$;
CREATE TABLE sales.orders (
    order_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    customer_id integer,
    flight_id integer,
    order_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) DEFAULT 'Pending'::character varying,
    total_amount numeric(10,2),
    ticket_quantity integer
);
ALTER TABLE sales.orders ADD CONSTRAINT orders_pkey PRIMARY KEY (order_id);
ALTER TABLE sales.orders OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.order_audit_log...';END$$;
CREATE TABLE sales.order_audit_log (
    audit_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    order_id integer,
    change_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    change_description character varying(500)
);
ALTER TABLE sales.order_audit_log ADD CONSTRAINT order_audit_log_pkey PRIMARY KEY (audit_id);
ALTER TABLE sales.order_audit_log OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.discount_code...';END$$;
CREATE TABLE sales.discount_code (
    discount_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    code character varying(20) NOT NULL,
    discount_percentage numeric(4,2),
    expiry_date timestamp with time zone
);
ALTER TABLE sales.discount_code ADD CONSTRAINT discount_code_pkey PRIMARY KEY (discount_id);
ALTER TABLE sales.discount_code OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.maintenance_log...';END$$;
CREATE TABLE inventory.maintenance_log (
    log_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    flight_id integer,
    maintenance_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    description character varying(500),
    maintenance_status character varying(20) DEFAULT 'Pending'::character varying
);
ALTER TABLE inventory.maintenance_log ADD CONSTRAINT maintenance_log_pkey PRIMARY KEY (log_id);
ALTER TABLE inventory.maintenance_log OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flight_route...';END$$;
CREATE TABLE inventory.flight_route (
    routeid integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    departure_city character varying(50) NOT NULL,
    arrival_city character varying(50) NOT NULL,
    distance integer NOT NULL
);
ALTER TABLE inventory.flight_route ADD CONSTRAINT flight_route_pkey PRIMARY KEY (routeid);
ALTER TABLE inventory.flight_route OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flight...';END$$;
CREATE TABLE inventory.flight (
    flight_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    airline character varying(50) NOT NULL,
    departure_city character varying(50) NOT NULL,
    arrival_city character varying(50) NOT NULL,
    departure_time timestamp with time zone NOT NULL,
    arrival_time timestamp with time zone NOT NULL,
    price numeric(10,2) NOT NULL,
    available_seats integer NOT NULL
);
ALTER TABLE inventory.flight ADD CONSTRAINT flight_pkey PRIMARY KEY (flight_id);
ALTER TABLE inventory.flight OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.loyalty_program...';END$$;
CREATE TABLE customers.loyalty_program (
    program_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    program_name character varying(50) NOT NULL,
    points_multiplier numeric(3,2) DEFAULT 1.0
);
ALTER TABLE customers.loyalty_program ADD CONSTRAINT loyalty_program_pkey PRIMARY KEY (program_id);
ALTER TABLE customers.loyalty_program OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_feedback...';END$$;
CREATE TABLE customers.customer_feedback (
    feedback_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    customer_id integer,
    feedback_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    rating integer,
    comments character varying(500)
);
ALTER TABLE customers.customer_feedback ADD CONSTRAINT customer_feedback_pkey PRIMARY KEY (feedback_id);
ALTER TABLE customers.customer_feedback OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer...';END$$;
CREATE TABLE customers.customer (
    customer_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    email character varying(100) NOT NULL,
    date_of_birth date,
    phone character varying(20),
    address character varying(200)
);
ALTER TABLE customers.customer ADD CONSTRAINT customer_pkey PRIMARY KEY (customer_id);
ALTER TABLE customers.customer OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.customer_orders_view...';END$$;
CREATE VIEW sales.customer_orders_view (customer_id, first_name, last_name, order_id, order_date, status, total_amount) AS SELECT c.customer_id,
    c.first_name,
    c.last_name,
    o.order_id,
    o.order_date,
    o.status,
    o.total_amount
   FROM (customers.customer c
     JOIN sales.orders o ON ((c.customer_id = o.customer_id)));
ALTER VIEW sales.customer_orders_view OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.flight_maintenance_status...';END$$;
CREATE VIEW inventory.flight_maintenance_status (flight_id, airline, departure_city, arrival_city, maintenance_count, completed_maintenance) AS SELECT f.flight_id,
    f.airline,
    f.departure_city,
    f.arrival_city,
    count(m.log_id) AS maintenance_count,
    sum(
        CASE
            WHEN ((m.maintenance_status)::text = 'completed'::text) THEN 1
            ELSE 0
        END) AS completed_maintenance
   FROM (inventory.flight f
     LEFT JOIN inventory.maintenance_log m ON ((f.flight_id = m.flight_id)))
  GROUP BY f.flight_id, f.airline, f.departure_city, f.arrival_city;
ALTER VIEW inventory.flight_maintenance_status OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_feedback_summary...';END$$;
CREATE VIEW customers.customer_feedback_summary (customer_id, first_name, last_name, average_rating, feedback_count) AS SELECT c.customer_id,
    c.first_name,
    c.last_name,
    avg(f.rating) AS average_rating,
    count(f.feedback_id) AS feedback_count
   FROM (customers.customer c
     LEFT JOIN customers.customer_feedback f ON ((c.customer_id = f.customer_id)))
  GROUP BY c.customer_id, c.first_name, c.last_name;
ALTER VIEW customers.customer_feedback_summary OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.update_order_status(integer, character varying)...';END$$;
CREATE PROCEDURE sales.update_order_status(IN order_id integer, IN new_status character varying)
LANGUAGE plpgsql
AS $_$
BEGIN
    UPDATE sales.orders
    SET status = new_status
    WHERE order_id = order_id;
END;
$_$;
ALTER PROCEDURE sales.update_order_status(IN order_id integer, IN new_status character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.get_customer_flight_history(integer)...';END$$;
CREATE FUNCTION sales.get_customer_flight_history(IN customer_id integer)
RETURNS TABLE(order_id integer, airline character varying, departure_city character varying, arrival_city character varying, order_date timestamp with time zone, status character varying, total_amount numeric)
LANGUAGE plpgsql
AS $_$
BEGIN
    RETURN QUERY
    SELECT 
        o.order_id,
        f.airline,
        f.departure_city,
        f.arrival_city,
        o.order_date,
        o.status,
        o.total_amount
    FROM sales.orders o
    JOIN inventory.flight f ON o.flight_id = f.flight_id
    WHERE o.customer_id = customer_id
    ORDER BY o.order_date;
END;
$_$;
ALTER FUNCTION sales.get_customer_flight_history(IN customer_id integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.apply_discount(integer, character varying)...';END$$;
CREATE PROCEDURE sales.apply_discount(IN order_id integer, IN discount_code character varying)
LANGUAGE plpgsql
AS $_$
DECLARE
        discount_id INT;
        discount_percentage NUMERIC(4, 2);
        expiry_date TIMESTAMPTZ;
BEGIN
    SELECT 
        discount_id,
        discount_percentage,
        expiry_date
    INTO 
        discount_id,
        discount_percentage,
        expiry_date
    FROM sales.discount_code
    WHERE code = discount_code;
    
    IF discount_id IS NOT NULL AND expiry_date >= CURRENT_TIMESTAMP THEN
        UPDATE sales.orders
        SET total_amount = total_amount * (1 - discount_percentage / 100)
        WHERE order_id = order_id;

        INSERT INTO sales.order_audit_log (order_id, change_description)
        VALUES (order_id, CONCAT('Discount ', discount_code, ' applied with ', discount_percentage, '% off.'));
    ELSE
        RAISE EXCEPTION 'Invalid or expired discount code.';
    END IF;
END;
$_$;
ALTER PROCEDURE sales.apply_discount(IN order_id integer, IN discount_code character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.update_available_seats(integer, integer)...';END$$;
CREATE PROCEDURE inventory.update_available_seats(IN flight_id integer, IN seat_change integer)
LANGUAGE plpgsql
AS $_$
BEGIN
    UPDATE inventory.flight
    SET available_seats = available_seats + seat_change
    WHERE flight_id = flight_id;
END;
$_$;
ALTER PROCEDURE inventory.update_available_seats(IN flight_id integer, IN seat_change integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.add_maintenance_log(integer, character varying)...';END$$;
CREATE PROCEDURE inventory.add_maintenance_log(IN flight_id integer, IN description character varying)
LANGUAGE plpgsql
AS $_$
BEGIN
    INSERT INTO inventory.maintenance_log (flight_id, description, maintenance_status)
    VALUES (flight_id, description, 'pending');

    RAISE NOTICE 'Maintenance log entry created.';
END;
$_$;
ALTER PROCEDURE inventory.add_maintenance_log(IN flight_id integer, IN description character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.record_feedback(integer, integer, character varying)...';END$$;
CREATE PROCEDURE customers.record_feedback(IN customer_id integer, IN rating integer, IN comments character varying)
LANGUAGE plpgsql
AS $_$
BEGIN
    INSERT INTO customers.customer_feedback (customer_id, rating, comments)
    VALUES (customer_id, rating, comments);

    RAISE NOTICE 'Customer feedback recorded successfully.';
END;
$_$;
ALTER PROCEDURE customers.record_feedback(IN customer_id integer, IN rating integer, IN comments character varying) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders.orders_flight_id_fkey...';END$$;
ALTER TABLE sales.orders ADD CONSTRAINT orders_flight_id_fkey FOREIGN KEY (flight_id) REFERENCES inventory.flight (flight_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.orders.orders_customer_id_fkey...';END$$;
ALTER TABLE sales.orders ADD CONSTRAINT orders_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES customers.customer (customer_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.order_audit_log.order_audit_log_order_id_fkey...';END$$;
ALTER TABLE sales.order_audit_log ADD CONSTRAINT order_audit_log_order_id_fkey FOREIGN KEY (order_id) REFERENCES sales.orders (order_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating inventory.maintenance_log.maintenance_log_flight_id_fkey...';END$$;
ALTER TABLE inventory.maintenance_log ADD CONSTRAINT maintenance_log_flight_id_fkey FOREIGN KEY (flight_id) REFERENCES inventory.flight (flight_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_feedback.customer_feedback_customer_id_fkey...';END$$;
ALTER TABLE customers.customer_feedback ADD CONSTRAINT customer_feedback_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES customers.customer (customer_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating sales.discount_code_code_key...';END$$;
ALTER TABLE sales.discount_code ADD CONSTRAINT discount_code_code_key UNIQUE (code);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating customers.customer_email_key...';END$$;
ALTER TABLE customers.customer ADD CONSTRAINT customer_email_key UNIQUE (email);

SET check_function_bodies = true;
